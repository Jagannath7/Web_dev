Hoisting

When the browser loads the JavaScript file,it makes an initial pass through the file before actually running the code.In this initial pass, it splits any variable declarations from assignment statements and hoists them to the top of their containing scope.Declarations are moved to the top while code is interpreted.

In case of var
Variables are first declared and then assigned the value in interpretation,functions are hoisted too.

In case of let
Assignment and declaration goes in same statement in case of let.functions are hoisted too.

note-fn declarations are hoisted but function are not

Closure
It is the combination of a function and the lexical environment(scope) within which that function was declared.
When a fn is declared in JS, that fn retains a snapshot of all variables and functions it can access when it was created.

function makeFunc() {
    let name = 'Covalence';

    function displayName() {
        alert(name);
    }

    return displayName;
}

let myFunc = makeFunc();

myFunc();

Context
-Function Context
It has nothing to do with where a function resides in our code,even though it frequently



Array Methods

1.every()
The every() method is available on all Arrays. It is used to test whether all the items in an array pass a specified test. The test is performed by executing a function that you pass into the every() method for every item in the Array.
The return value for the every() method is a boolean.
const oldEnough = [21, 25, 23, 21, 22, 24];
const notOldEnough = [21, 25, 23, 21, 17, 24];

function is21OrOver(age) {
    return age >= 21;
}

console.log(oldEnough.every(is21OrOver)); // true
console.log(notOldEnough.every(is21OrOver)); // false

2.filter()
The filter() method is available on all Arrays. It is used to create a new array with all the items that pass a test. The test is performed by executing a function that you pass into the filter() method for every item in the Array.The return value for the filter() method is a new, filtered array.
const nums = [1, 2, 3, 4, 5];

const evens = nums.filter((i) => {
    return i % 2 == 0;
});

console.log(nums); // [1, 2, 3, 4, 5]
console.log(evens); // [2,4]

3.forEach()
The forEach method can be used instead of a for loop. The code is easier to read and follow as it makes logical sense. You are running a callback function "for each" item in the array.There is no return value for the forEach().
const nums = [1, 3, 5];

nums.forEach((num, index) => {
    console.log(`The number at index ${index} is ${num}`);
});

4.indexOf()
The indexOf() method is available on all Arrays. It is used to determine the first index at which a given element exists in an Array. Typically people use it to determine whether or not an Array contains an element, but it can also be used to determine if an Array has more than one instance of an element.The return value for the indexOf() method is a non-negative number indicating the first index where the element is found, or -1 indicating that the element is not found.
const nums = [1, 2, 3, 2, 5];

const has2 = nums.indexOf(2);
const has2Twice = nums.indexOf(2, 2);
const has6 = nums.indexOf(6);

console.log(has2); // 1
console.log(has2Twice); // 3
console.log(has6); // -1

5.lastIndexOf()
The lastIndexOf() method is available on all Arrays. It is used to determine the last index at which a given element exists in an Array. In other words, it operates exactly as indexOf() only it searches the array backwards, starting at fromIndex.The return value for the lastIndexOf() method is a non-negative number indicating the last index where the element is found, or -1 indicating that the element is not found.

const nums = [1, 2, 3, 2, 5];

const has2 = nums.lastIndexOf(2);
const has2Twice = nums.lastIndexOf(2, 2);
const has6 = nums.lastIndexOf(6);

console.log(has2); // 3
console.log(has2Twice); // 1
console.log(has6); // -1

6.map()
Calls a function for every element in an array and returns a new array with the return value of each function call.The return value for the map() method is a new array containing the returned values from calling the iterator function.

const nums = [1, 3, 5, 7, 9];

const doubles = nums.map((num) => {
    return num * 2;
});

console.log(nums); // [1, 3, 5, 7, 9]
console.log(doubles); // [2, 6, 10, 14, 18]

7.reduce()
The reduce() method is available on all Arrays. It is an incredibly useful method to understand and it pretty much does what it says. The purpose of the reduce method is to "reduce" an array into a single output value. It does this by executing a "reducer" function for each item in an array, and allowing you to keep an accumulator that serves as the final reduced value.The return value for the reduce() method is the final value of accumulator obtained by calling the reducer callback for every item in the array.

arr.reduce(callback[, initialValue])

8.reduceRight()
The reduceRight array method behaves similarly to the 'reduce' method, but reduction begins from the right.

9.some()
The some() method is available on all Arrays. It is used to test whether at least one of items in an array passes a specified test. The test is performed by executing a function that you pass into the some() method for the items in the Array.The return value for the some() method is a boolean.

arr.some(callback(element[, index[, array]]))







