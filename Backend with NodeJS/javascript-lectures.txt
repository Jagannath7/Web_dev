js is REPL(read,execute,print,loop)

let,const(constant variable),var-for declaring variables
console.log("")-for printing
for loops works similar to the one in c++
typeof-tells type of data//return type is string
can/cant use semicolons

datatypes/variables
str_name-""//string
bool_name-true/false//boolean
number//floating no is also number
string//char is also string,can be defined in both single quotes and double quotes
Number.MAX_SAFE_INTEGER--gives max. no that can be used

objects
 //properties are defined inside object and nested objects can be created
let obj_name{
	a:10;      
	b:"nm"
	c:{
	x:"ssd"
	}
}
console.log(obj.c.x)//to print a property
obj.l=7894;//new property added to object obj
delete obj.a//property deleted from obj

function
function fn_name(x,y,z)
{
	return (x+1)
}
var takes fn scope not block scope
let takes block scope
const takes block scope

equality
1=="1"//non strict equality operator , type cast is done 
returns true
1==="1"//strict equality operator,no type cast is done
returns false

LHS                     RHS
{}                       {}
represents block,represents object

strings,arrays
--codes

var,let,const
const objects acts like other objects like property can be added and deleted
and arrays too/ push and pop can be done

In js,variables are passed by value in functions.
In case of arrays,values are actually references of values. so it looks like values are passed by reference when they are not.

IIFE(immediately invoked function expression)
function myfun(){
... console.log("hello")
... }
 myfun();

 (function (){
... console.log("hey")
... }) ()



Closure scope
function count(){                           Output
	var initial=1;
	function plus(){                          2
	 console.log(++initial)                   3
	}
	return plus;
}

var c=count;
c();
c();

plus fn has closure scope i.e. inner fn gets the local scope of outer fn

Function callstack
function a(){
	b();
}
function b(){
	c();
}
function c(){
	console.log("shows callstack")
}

stack consisting a()--b()--c()

Async programming-setTimeout , setInterval
setTimeout(callback fn,delay,arguments)//syntax for using this fn
Fn will be executed once after the delay given

setInterval(callback fn,delay)
Fn will be executed contionously after delay value
clearInterval() is used to stop the fn execution and clear the interval value.
 
 eg-
var a=setInterval(fn-name,100);
clearInterval(a);

Libraries for 
//downloads a file,compresses it and uploads it somewhere else
1. request
2.archiver
3.yazl
4.axios

Util library
functions-util.promisify and util.callbackify

for getting time of execution
new Date.getTime()


Async-await hell
requiring large time to execute multiple tasks
it can be resolved using 2 methods.(do things parallely)
1. async function task(){
	const completed1=task1 ()
	const completed2=task2 ()
	const completed3=task3 ()

	await completed1
	await cpmpleted2
	await completed3
}
task1(),task2(),task3() are async functions consisting of different operation
2.Promise.all([
task1 (),
task2 (),
task3 ()]).then()

task1,task2,task3 will run parallely in this function

Proto-chain in OOPS
let a={p:10,q:"abc",r:false};
let b=Object.create(a);
let c=Object.create(b);

a.isPrototypeOf(b) =>true  
//if b is created from a?

b.__proto__.p++ =>11

every string is created from String.prototype,same in case boolean from boolean ,number from no.

a.r.__proto__==String.prototype =>true

String.prototype,Number.prototype n everything is created from Object.prototype

Object.prototype.isPrototypeOf(Boolean.prototype) =>true
                                          
Web protocols

TCP/IP ALTERNATIVE - UDP (how to devices are connected )
HTTP (defines UI,domain,extension)
DHCP (dynamic host control protocol,allocating IP address to devices over a network )
FTP (outdated version of HTTP)
SMTP (simple mail transfer protocol,)
SSH (secure shell)
Telnet (low level protocol,raw form transmission)

Web addresses

-Domain names
human readable web address
<subdomain>.<domain>.<TLD>
TLD stands for top level domain(eg-.org,.com,. )
ICANN provides domain names

-IP addresses
32 bit,4 wors address(IPv4), uniquely defines a server,a client,a node or a router
given by IANA to different org.
IP allows subnets,gateways and private Ips

IP address class
a.b.c.d

Class{x can be anything between 1 and 254,as 0 and 255 are reserved for local addressing and broadcasting}
A      0-126   [0xxxxxxx]
B      128-191 [10xxxxxx]
C      192-223 [110xxxxx]
D      224-239 [1110xxxx]
E      240-254 [1111xxxx]

126 class A addresses ,each having 16.7 million computers connected to net

class B -each having 2 to power 16 
 
-MAC address
(media access control)
id unique to a hardware network interface
not dynamic like IP,fixed for a hardware device
used by all IEEE 802 network technologies
eg-wifi card of laptop

Middlewares
functions like f(req,res,next){}
middleware having next() then it passes to next middleware
and if res.send is used then it doesn't pass to next middleware


Using MySQL

mysql -u root -p

create database mytestdb;

create user myuser identified by 'mypass';

use mytestdb

GRANT ALL PRIVILEGES ON mytestdb.* to myuser;

flush privileges;

 exit

 mysql -u myuser -p

show databases;

MongoDB

-document database
-collections contains objects
try localhost:27017 on browser if it shows :It looks like you are trying to access MongoDB over HTTP on the native driver port.
then MongoDB is working on system

Web Sockets
library-Socket.io
generally client sends some request to server.
Now when server wants to send something to the client or vice-versa then sockets are used.
Uses piplining
uses ws protocol like ws://chat.com
ws itself runs on http protocol

It is server side library as well as client side library

Unit Testing
{FOR LOGIC}
1. install mocha and chai using npm packages
2. create a folder with name "test"
3. add test files to the folder
4. add mocha to the "test:" in place of what's written in front of it in package.json file
5. use command for running: npm run test
 
Package:nyc allows code coverage under framework Istanbul

To run coverage:
run command = npm run cover

{FOR SERVER}

1. create app.js file and remove listen command from server.js and add it to app.js
2. create file server.test.js in test folder
3. run command : npm install request

Deploying

1. Frontend
2. Frontend+Backend
3. Backend
{1-static hosting,html hosting}
only bandwidth  
{2,3-server,cloud hosting,VPS(virtual private hosting)}
cpu+ram+disk+bandwidth

Frontend+Backend
1. Bare Metal
requires- static IP,high upload speed,UPS(uninterrupted power supply)

2. Infrastructure(in form of service)
eg-AWS,GCE(Google cloud engine),digital ocean

3.  Platform(as a service)
you only provide source code to the service provider
eg-Heroku

Frontend
eg-GitHub





